import pandas as pd
import openpyxl
import xlsxwriter
from datetime import datetime
import json
import warnings
warnings.simplefilter('ignore')


# Функция для преобразования значений string в float в столбце ГЭСВ для 3 банка
def object_to_float(row):
    if str(row).find(',') == -1:
        return float(row)
    else:
        return float(row.replace(',', '.'))


pd.set_option('display.max_columns', None)

# Распаковка всех 5 баз данных разных банков, с заранее заданными, одинаковыми названиями столбцов
data_1 = pd.read_excel('Банк 1.xlsx', names=['Номер', 'ИИН заемщика', 'Код контракта',
                                             'Дата начала срока действия договора',
                                             'Дата завершения срока действия договора', 'ГЭСВ',
                                             'Сумма предстоящих платежей/Остаточная сумма(основной долг), тенге',
                                             'Сумма предстоящих платежей/Остаточная сумма(вознаграждение), тенге',
                                             'Сумма просроченных платежей(основной долг), тенге',
                                             'Сумма просроченных платежей(вознаграждение), тенге',
                                             'Наименование БВУ/МФО', 'БИН БВУ/МФО'])

data_2 = pd.read_excel('Банк 2.xlsx', names=['Номер', 'ИИН заемщика', 'Код контракта',
                                             'Дата начала срока действия договора',
                                             'Дата завершения срока действия договора', 'ГЭСВ',
                                             'Сумма предстоящих платежей/Остаточная сумма(основной долг), тенге',
                                             'Сумма предстоящих платежей/Остаточная сумма(вознаграждение), тенге',
                                             'Сумма просроченных платежей(основной долг), тенге',
                                             'Сумма просроченных платежей(вознаграждение), тенге',
                                             'Наименование БВУ/МФО', 'БИН БВУ/МФО'],
                       skipfooter=1)

data_3 = pd.read_excel('Банк 3.xlsx', names=['ИИН заемщика', 'Код контракта',
                                             'Дата начала срока действия договора',
                                             'Дата завершения срока действия договора', 'ГЭСВ',
                                             'Сумма предстоящих платежей/Остаточная сумма(основной долг), тенге',
                                             'Сумма предстоящих платежей/Остаточная сумма(вознаграждение), тенге',
                                             'Сумма просроченных платежей(основной долг), тенге',
                                             'Сумма просроченных платежей(вознаграждение), тенге',
                                             'Наименование БВУ/МФО', 'БИН БВУ/МФО'])

data_4 = pd.read_excel('Банк 4.xlsx', names=['Номер', 'ИИН заемщика', 'Код контракта',
                                             'Дата начала срока действия договора',
                                             'Дата завершения срока действия договора', 'ГЭСВ',
                                             'Сумма предстоящих платежей/Остаточная сумма(основной долг), тенге',
                                             'Сумма предстоящих платежей/Остаточная сумма(вознаграждение), тенге',
                                             'Сумма просроченных платежей(основной долг), тенге',
                                             'Сумма просроченных платежей(вознаграждение), тенге',
                                             'Наименование БВУ/МФО', 'БИН БВУ/МФО'])

data_5 = pd.read_excel('Банк 5.xlsx', names=['Номер', 'ИИН заемщика', 'Код контракта',
                                             'Дата начала срока действия договора',
                                             'Дата завершения срока действия договора', 'ГЭСВ',
                                             'Сумма предстоящих платежей/Остаточная сумма(основной долг), тенге',
                                             'Сумма предстоящих платежей/Остаточная сумма(вознаграждение), тенге',
                                             'Сумма просроченных платежей(основной долг), тенге',
                                             'Сумма просроченных платежей(вознаграждение), тенге',
                                             'Наименование БВУ/МФО', 'БИН БВУ/МФО'])

# Склеивание 1, 2, 4 и 5 баз в одну общую (без 3, т.к в ней нет столбца с номерами строк)
new_data = pd.concat([data_1, data_2, data_4, data_5], axis=0, ignore_index=True)

# Удаление столбца с номерами строк - 'Номер'
new_data = new_data.drop(['Номер'], axis=1)

# Обработка 3 базы данных
data_3['Дата начала срока действия договора'] = data_3['Дата начала срока действия договора'].apply(
    lambda x: datetime.strptime(x, '%d.%m.%Y'))
data_3 = data_3[data_3['ГЭСВ'].notnull()]
data_3['ГЭСВ'] = data_3['ГЭСВ'].apply(object_to_float)

# Склеивание 3 базы данных с, полученной ранее, общей
new_data = pd.concat([new_data, data_3], axis=0, ignore_index=True)

# Создание нового столбца, включающего сумма всех задолженность по данному кредиту - 'Сумма задолженностей'
new_data['Сумма задолженностей'] = new_data['Сумма предстоящих платежей/Остаточная сумма(основной долг), тенге'] \
                                   + new_data['Сумма предстоящих платежей/Остаточная сумма(вознаграждение), тенге'] \
                                   + new_data['Сумма просроченных платежей(основной долг), тенге'] \
                                   + new_data['Сумма просроченных платежей(вознаграждение), тенге']

# Удаление лишних строк: сумма задолженностей равна 0; ИИН заемщика не указан
new_data = new_data[new_data['Сумма задолженностей'] != 0]
new_data = new_data[new_data['ИИН заемщика'].notnull()]

# Удаление лишних столбцов, далее не несущих полезной информации
new_data = new_data.drop(['Наименование БВУ/МФО', 'БИН БВУ/МФО', 'Дата завершения срока действия договора',
                          'Сумма предстоящих платежей/Остаточная сумма(основной долг), тенге',
                          'Сумма предстоящих платежей/Остаточная сумма(вознаграждение), тенге',
                          'Сумма просроченных платежей(основной долг), тенге',
                          'Сумма просроченных платежей(вознаграждение), тенге'], axis=1)

# Группировка строк по субъектам (ИИН заемщика) с последующим суммированием всех задолженностей данного субъекта
data_subjects = new_data.groupby('ИИН заемщика')['Сумма задолженностей'].sum()
data_subjects = data_subjects.to_frame()

# Отсеивание субъектов, общая сумма задолженностей которых более 3 млн. тг.
data_subjects = data_subjects[data_subjects['Сумма задолженностей'] < 3000000]

# Создание списка оставшихся субъектов
subjects = data_subjects.index.tolist()

# Отсеивание всех кредитов тех субъектов, общая сумма задолженностей которых больше 3 млн. тг.
new_data = new_data[new_data['ИИН заемщика'].isin(subjects)]

# Сортировка кредитов по: ГЭСВ, Дате начала срока действия договора
new_data = new_data.sort_values(['ГЭСВ', 'Дата начала срока действия договора'], ascending=[False, True])

# Создание списка, в котором будет храниться отсортированный набор субъектов
sorted_subjects = []

for subject in new_data['ИИН заемщика']:
    if subject not in sorted_subjects:
        sorted_subjects.append(subject)

# Создание списка, содержащего отсортированные и сгруппированные строки отдельных кредитов по каждому субъекту
test_list = []

for subject in sorted_subjects:
    for index, row in new_data.iterrows():
        if row['ИИН заемщика'] == subject:
            row_list = [row['ИИН заемщика'], row['Код контракта'], row['Дата начала срока действия договора'],
                        row['ГЭСВ'], row['Сумма задолженностей']]
            test_list.append(row_list)

# Создание новой базы данных с отсортированными строками, соглсано заданным критериям,
# а также сгруппированными по ИИН субъекта для разных кредитов
sorted_data = pd.DataFrame(test_list, columns=['ИИН заемщика', 'Код контракта', 'Дата начала срока действия договора',
                                               'ГЭСВ', 'Сумма задолженностей'])

sorted_data["Остаток выплаты после погашения кредита"] = 300000

final_list = []

# Алгоритм для учёта остатка после погашения возможных кредтов субъекта
for subject in sorted_subjects:
    Temp = sorted_data[sorted_data["ИИН заемщика"] == subject]
    Temp = Temp.sort_values("Сумма задолженностей", ascending=True)
    left = 300000
    for index, row in Temp.iterrows():
        if left > row["Сумма задолженностей"]:
            left -= row["Сумма задолженностей"]
            row["Сумма задолженностей"] = 0
            row["Остаток выплаты после погашения кредита"] = left
        elif left <= row["Сумма задолженностей"]:
            row["Сумма задолженностей"] -= left
            left = 0
            row["Остаток выплаты после погашения кредита"] = left
        row_list_2 = [row['ИИН заемщика'], row['Код контракта'], row['Дата начала срока действия договора'],
                      row['ГЭСВ'], row['Сумма задолженностей'], row['Остаток выплаты после погашения кредита']]
        final_list.append(row_list_2)

# Создание финальной базы с сохранённым порядком сортировки и учётом остатка от выплаты после погашения кредитов
final_data = pd.DataFrame(final_list, columns=['ИИН заемщика', 'Код контракта',
                                               'Дата начала срока действия договора', 'ГЭСВ', 'Сумма задолженностей',
                                               'Остаток выпалты после погашения кредита'])

# Преобразование datetime в строку, т.к json не принимает формат datetime
final_data['Дата начала срока действия договора'] = final_data['Дата начала срока действия договора'].apply(
    lambda x: x.strftime('%d.%m.%Y'))

# Список индексов для отсортированной базы данных
indexes = final_data.index.tolist()

# Преобразования для создания json файла
data_to_json = []
for current_index in indexes:
    inn = final_data['ИИН заемщика'].iloc[current_index]
    code = final_data['Код контракта'].iloc[current_index]
    date = final_data['Дата начала срока действия договора'].iloc[current_index]
    gesv = final_data['ГЭСВ'].iloc[current_index]
    sum_of_debt = final_data['Сумма задолженностей'].iloc[current_index]
    money_left = final_data['Остаток выплаты после погашения кредита'].iloc[current_index]
    current_row = {'ИИН заемщика': inn, 'Код контракта': code, 'Дата начала срока действия договора': date,
                   'ГЭСВ': gesv, 'Сумма задолженностей': sum_of_debt,
                   'Остаток выплаты после погашения кредита': money_left}
    data_to_json.append(current_row)

print(data_to_json)

# Сохранение json файла
with open("Data.json", "w") as write_file:
    json.dump(data_to_json, write_file)
